import dash
from dash import dcc, html, Input, Output
import dash_bootstrap_components as dbc

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
app.title = "Client Profitability Dashboard by RG Matumba"



# Tax rate
TAX_RATE = 0.27

# Product data
products = {
    "Credit Card": {
        "interest_received": 70500,
        "cost_of_funds": 48740,
        "return_on_capital": 2056,
        "credit_premium": 2176,
        "other_fee_income": 10000,
        "overheads": 13500,
        "tier1_cost": 91,
        "tier2_cost": 111,
        "core_equity_cost": 4154,
        "core_equity_capital": 28355
    },
    "Overdraft": {
        "interest_received": 42707,
        "cost_of_funds": 32200,
        "return_on_capital": 1956,
        "credit_premium": 2061,
        "other_fee_income": 10000,
        "overheads": 4100,
        "tier1_cost": 86,
        "tier2_cost": 106,
        "core_equity_cost": 3953,
        "core_equity_capital": 26984
    },
    "Guarantee": {
        "interest_received": 0,
        "cost_of_funds": 0,
        "return_on_capital": 1730,
        "credit_premium": 1250,
        "other_fee_income": 17991,
        "overheads": 8927,
        "tier1_cost": 76,
        "tier2_cost": 94,
        "core_equity_cost": 3496,
        "core_equity_capital": 23865
    }
}

app.layout = dbc.Container([
    html.H2("Client Profitability Dashboard By RG Matumba", className="mt-3"),
    dcc.Tabs(id="tabs", value='dashboard', children=[
        dcc.Tab(label='Profit Calculator', value='dashboard'),
        dcc.Tab(label='Django Research', value='research'),
    ]),
    html.Div(id='tabs-content', className="mt-4")
], fluid=True)


@app.callback(Output('tabs-content', 'children'), Input('tabs', 'value'))
def render_content(tab):
    if tab == 'dashboard':
        return html.Div([
            dcc.Checklist(
                id="product-selector",
                options=[{"label": k, "value": k} for k in products.keys()],
                value=["Credit Card", "Overdraft"],
                labelStyle={"display": "block"}
            ),
            html.Div(id="output-panel")
        ])
    elif tab == 'research':
        return html.Div([
            html.H4("Django Learning Plan and Use in Banking"),
            html.Details([
                html.Summary("1. 3-Month Django Learning Plan"),
                dcc.Markdown('''
### Month 1: Django Fundamentals
- Set up environment, start project
- Models, admin, URLs, views, templates
- Deploy a simple app

### Month 2: REST APIs and Authentication
- Use Django REST Framework
- Token auth, user permissions
- Connect PostgreSQL, test endpoints

### Month 3: ML Integration & Deployment
- Integrate predictive models (pickle/joblib)
- Dashboard to view predictions
- Schedule background jobs with Celery
                ''')
            ], open=False),

            html.Details([
                html.Summary("2. Use Cases of Django for Predictive Models in Banking"),
                dcc.Markdown('''
- **Host Prediction APIs** for credit risk, churn, fraud
- **Dashboards** to visualize ML outputs (e.g., risk scores)
- **Model retraining pipelines** (Celery, Redis)
- **User-based views**: Analysts vs Managers
- **Auditable prediction logs** for compliance
                ''')
            ], open=False)
        ])



@app.callback(
    Output("output-panel", "children"),
    Input("product-selector", "value")
)
def update_output(selected):
    if not selected:
        return "Please select at least one product."

    agg = {k: 0 for k in next(iter(products.values())).keys()}
    for prod in selected:
        for k, v in products[prod].items():
            agg[k] += v

    gross_margin = agg['interest_received'] - agg['cost_of_funds']
    lending_margin = gross_margin + agg['return_on_capital'] - agg['credit_premium']
    libt = lending_margin + agg['other_fee_income'] - agg['overheads'] - agg['tier1_cost'] - agg['tier2_cost']
    tax = libt * TAX_RATE
    liacc = libt - tax - agg['core_equity_cost']
    roe = ((libt - tax) / agg['core_equity_capital']) * 100 if agg['core_equity_capital'] else 0

    table = dbc.Table([
        html.Thead(html.Tr([html.Th("Metric"), html.Th("Amount (R)")])),
        html.Tbody([
            html.Tr([html.Td("Interest Received"), html.Td(f"{agg['interest_received']:,.2f}")]),
            html.Tr([html.Td("Cost of Funds"), html.Td(f"{agg['cost_of_funds']:,.2f}")]),
            html.Tr([html.Td("Gross Lending Margin"), html.Td(f"{gross_margin:,.2f}")]),
            html.Tr([html.Td("Return on Capital Invested"), html.Td(f"{agg['return_on_capital']:,.2f}")]),
            html.Tr([html.Td("Credit Premium"), html.Td(f"{agg['credit_premium']:,.2f}")]),
            html.Tr([html.Td("Lending Margin after Credit Premium"), html.Td(f"{lending_margin:,.2f}")]),
            html.Tr([html.Td("Other Fee Income"), html.Td(f"{agg['other_fee_income']:,.2f}")]),
            html.Tr([html.Td("Overheads"), html.Td(f"{agg['overheads']:,.2f}")]),
            html.Tr([html.Td("Tier 1 Cost"), html.Td(f"{agg['tier1_cost']:,.2f}")]),
            html.Tr([html.Td("Tier 2 Cost"), html.Td(f"{agg['tier2_cost']:,.2f}")]),
            html.Tr([html.Td("LIBT"), html.Td(f"{libt:,.2f}")]),
            html.Tr([html.Td("Tax (27%)"), html.Td(f"{tax:,.2f}")]),
            html.Tr([html.Td("Core Equity Tier 1 Cost"), html.Td(f"{agg['core_equity_cost']:,.2f}")]),
            html.Tr([html.Td("LIACC"), html.Td(f"{liacc:,.2f}")]),
            html.Tr([html.Td("ROE (%)"), html.Td(f"{roe:.2f}%")]),
        ])
    ], bordered=True, hover=True, responsive=True, striped=True)

    return table

if __name__ == "__main__":
    app.run(port = 4050)
